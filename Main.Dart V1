//external coding refrences
import 'package:english_words/english_words.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

//Your standard make program run statement
void main() {
  runApp(MyApp());
}

//This is something like a html header.
//It defines the general condition of the program
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => MyAppState(),
      child: MaterialApp(
        title: 'Compound Word Maker',
        theme: ThemeData(
          useMaterial3: true,
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.indigo),
        ),
        home: MyHomePage(),
      ),
    );
  }
}

//these are methods, functions and properties.
//the usage of 'extends' allows the results to be shared across the program.
class MyAppState extends ChangeNotifier {
  var current = WordPair.random();

  void getNext() {
    current = WordPair.random();
    notifyListeners();
  }

  var favorites = <WordPair>[]; //adding list features
//lists are expressed with [], sets are {}
  void toggleFavorite() {
    if (favorites.contains(current)) {
      favorites.remove(current);
    } else {
      favorites.add(current);
    }
    notifyListeners();
  }
}

//the folowing is what is being displayed
class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    var appState = context.watch<MyAppState>();
    var pair = appState.current;

    return Scaffold(
      //scaffold, just situates the folow content from top to bottom in sequence
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('A random confusing idea:'),
            result(
                pair:
                    pair), //result is a specificaly designated text element, defined by refactoring.
            //right click the "Text" keyword, above, select Refactor and you will see what I mean
            SizedBox(height: 10),

            //adding a button, now i have put the Elevated button in a row, its kindof like a family tree.
            //Row is like a parent, and it has children, the 'Next' and 'like' buttons would be the children/child
            Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                ElevatedButton(
                  onPressed: () {
                    appState.toggleFavorite();
                  },
                  child: Text('<3 Like'),
                ),
                SizedBox(width: 10),
                ElevatedButton(
                  onPressed: () {
                    appState.getNext(); //plainly this is what it says
                  },
                  child: Text('Next'), //This is its visible text)
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

//the refactored "Text" turned "result" becomes its own function allowing further refinement
class result extends StatelessWidget {
  const result({
    super.key,
    required this.pair,
  });

  final WordPair pair;
//think of build() a bit like CSS in html.
  @override
  Widget build(BuildContext context) {
    final theme =
        Theme.of(context); //final is like a const, but slightly flexible.
    final style = theme.textTheme.displayMedium!.copyWith(
      color: theme.colorScheme.onPrimary,
    );

    return Card(
      color: theme.colorScheme.primary,
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Text(
          pair.asLowerCase,
          style: style,
          semanticsLabel: "${pair.first} ${pair.second}",
        ),
      ),
    );
  }
}
